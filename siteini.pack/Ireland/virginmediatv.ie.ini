**------------------------------------------------------------------------------------------------
* @header_start
* WebGrab+Plus ini for grabbing EPG data from TvGuide websites
* @Site: virginmediatv.ie
* @MinSWversion: V5.0
* @Revision 0 - [27/03/2024] Blackbear199
*     - creation
* @Remarks:
* @header_end
**------------------------------------------------------------------------------------------------
site {url=virginmediatv.ie|timezone=UTC|maxdays=7|cultureinfo=en-IE|charset=utf-8|titlematchfactor=90|keepindexpage}
site {ratingsystem=IE|episodesystem=onscreen|retry=<retry time-out="30">4</retry>}
*
scope.range {(urlindex)|end}
url_index {url|https://spark-prod-ie.gnp.cloud.virginmediatv.ie/eng/web/linear-service/v2/channels?cityId=131&language=en&productClass=Orion-DASH}
url_index.headers {method=POST_BACK(GET,GET)}
url_index.headers {customheader=Accept-Encoding=gzip,deflate,br}
global_temp_1.modify {set|'config_site_id'}
global_temp_2.scrub {single|{"id":"'global_temp_1'","name":|"focused":"|"|}}
end_scope
*
scope.range {(postback)|1}
url_index.modify {set|https://staticqbr-prod-ie.gnp.cloud.virginmediatv.ie/eng/android/epg-service-lite/ie/en/events/segments/'urldate''subpage'0000}
*
urldate.format {datestring|yyyyMMdd}
subpage.format{list|00|06|12|18}
*
index_urlchannellogo.modify {set|'global_temp_2'}
*
index_showsplit.scrub {regex||\{"channelId":"'global_temp_1'","events":\[(\{.*?\})\]\}||}
scope.range {(splitindex)|end}
index_showsplit.modify {replace(type=regex)|"\!\?\?\!"|:}
index_showsplit.modify {replace|\},\{"audioLanguages"|\}\|\{"audioLanguages"}
index_showsplit.modify {cleanup(style=unidecode)}
index_showsplit.modify {cleanup(style=jsondecode)}
index_temp_9.modify {substring(type=regex)|'index_showsplit' "\"startTime\":\s*(\d+)"}
index_temp_9.modify {cleanup(removeduplicates link="index_showsplit")}
*index_showsplit.modify {(debug)}
end_scope
*
index_start.scrub {single|"startTime":||,|,}
index_stop.scrub {single|"endTime":||,|,}
index_title.scrub {single|"title":"||"}|"}}
index_temp_1.scrub {single|"id":"||"|"}
*
index_urlshow.modify {addstart|https://spark-prod-ie.gnp.cloud.virginmediatv.ie/eng/web/linear-service/v2/replayEvent/'index_temp_1'?returnLinearContent=true&forceLinearResponse=true&language=en}
index_urlshow.headers {customheader=Accept-Encoding=gzip,deflate,br}
*
title.scrub {single|"title":"||",|",}
subtitle.scrub {single|"episodeName":"||",|",}
description.scrub {single|"longDescription":"||","|","}
category.scrub {multi(separator="\",\"")|"genres":["||"]}
director.scrub {single(separator="\",\"")|"directors":["||"]|"]}
producer.scrub {single(separator="\",\"")|"producers":["||"]|"]}
episode.scrub {single(pattern="S'S1' E'E1'""S'S1'""E'E1'")|"episodeNumber":||,|,}
actor.scrub {single(separator="\",\"")|"actors":["||"]|"]}
productiondate.scrub {single|"productionDate":"||"|"}
country.scrub {single|"countryOfOrigin":"||"|"}
rating.scrub {single|"minimumAge":"||"|"}
showicon.scrub {single|"imageVersion":"||"|"}
temp_1.scrub {single|"seasonNumber":||,|,}
*
title.modify {cleanup(style=jsondecode)}
subtitle.modify {cleanup(style=jsondecode)}
description.modify {cleanup(style=jsondecode)}
director.modify {cleanup(style=jsondecode)}
producer.modify {cleanup(style=jsondecode)}
actor.modify {cleanup(style=jsondecode)}
showicon.modify {set(not "")|https://staticqbr-prod-ie.gnp.cloud.virginmediatv.ie/image-service/intent/'index_temp_1'/posterTile?imageVersion='showicon'&w=200}
*
episode.modify {remove|'productiondate'}
temp_1.modify {remove|'productiondate'}
episode.modify {addstart(not "")|E}
temp_1.modify {clear(> "1000")}
episode.modify {addstart('temp_1' not "")|S'temp_1' }
** _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _
*      #####  CHANNEL FILE CREATION (only to create the xxx-channel.xml file)
*
** @auto_xml_channel_start
*url_index {url|https://spark-prod-ie.gnp.cloud.virginmediatv.ie/eng/web/linear-service/v2/channels?cityId=131&language=en&productClass=Orion-DASH}
*url_index.headers {method=GET}
*subpage.format {list|}
*index_site_id.scrub {regex||\{"id":"([^"]*)","name":"[^"]*","logicalChannelNumber"||}
*index_site_channel.scrub {regex||\{"id":"[^"]*","name":"([^"]*)","logicalChannelNumber"||}
*index_site_channel.modify {replace|'|`}
*index_site_id.modify {cleanup(removeduplicates link="index_site_channel")}
* @auto_xml_channel_end
