**------------------------------------------------------------------------------------------------
* @header_start
* WebGrab+Plus ini for grabbing EPG data from TvGuide websites
* @Site: musor.tv
* @MinSWversion: V5.0
* @Revision 18 - [26/04/2024] Blackbear199
*   add premiere
* @Revision 17 - [24/12/2023] Blackbear199
*   details title fix for random index_urlshow failures
*   change start time to UTC
* @Revision 16 - [11/11/2023] Blackbear199
*   desc fix(MTV channels)
*   add titleoriginal(subtitle extraction).cleared afterwards
*   add delays(prevent ip ban)
* @Revision 15 - [04/11/2023] Blackbear199
*   site changes
* @Revision 14 - [25/08/2019] Blackbear199
*   detail title fix
* @Revision 13 - [01/11/2017] Blackbear199
*   site changes
* @Revision 12 - [17/07/2017] Blackbear199
*   site changes
* @Revision 11 - [23/04/2017] Blackbear199
*   start date correction
* @Revision 10 - [25/12/2016] Blackbear199
*   site changes
*   updated season/episode to 56.25+ system
* @Remarks
* @header_end
**------------------------------------------------------------------------------------------------
site {url=musor.tv|timezone=UTC|maxdays=14|cultureinfo=hu-HU|charset=UTF-8|titlematchfactor=90|allowlastdayoverflow}
site {ratingsystem=HU|episodesystem=onscreen|retry=<retry time-out="30" channel-delay="1" index-delay="1" show-delay="2">4</retry>}
*
url_index {url|https://musor.tv/napi/tvmusor/|channel|/|urldate|}
url_index.headers {customheader=Accept-Encoding=gzip,deflate,br}
*
urldate.format {datestring|yyyy.MM.dd}
*
index_urlchannellogo {url|https://www.musor.tv|class="channelheaderlink">|<img src="|"|</a>}
*
index_showsplit.scrub {multi|műsor</h2>|<div class="smartpe_progentry "||</section>}
scope.range {(splitindex)|end}
index_temp_1.modify {substring(type=regex)|'index_showsplit' "itemprop=\"startDate\" content=\"([^\"]*)"}
index_temp_1.modify {cleanup(removeduplicates link="index_showsplit")}
*index_showsplit.modify {(debug)}
end_scope
*
index_urlshow {url|https://www.musor.tv|href="||"|"}
index_urlshow.headers {customheader=Accept-Encoding=gzip,deflate,br}
*
index_start.scrub {single|itemprop="startDate|content="|">|</time>}
index_title.scrub {single|itemprop="name">||</h3>|</h3>}
index_premiere.scrub {single(include="PREMIER")|<span class="smartpe_recommendation_text_common|">|</span>|</span>}
*index_category.scrub {single|<div class="smartpe_progshortdesc"|>|</div>|</div>}
*
scope.range {(indexshowdetails)|end}
index_start.modify {replace|GMT|T}
index_title.modify {cleanup(tags="<"">")}
index_title.modify {remove(type=regex)|"\s(?:[CDLMXVI]+\.*\/)?\d+\.$"}
index_productiondate.scrub {single|<div class="smartpe_progshortdesc"|>|</div>|</div>}
index_category.modify {remove('index_productiondate' not "" type=regex)|,\s*'index_productiondate'}
index_category.modify {clear('index_productiondate')}
index_category.modify {cleanup(style=name)}
index_premiere.modify {set(not "")|true}
end_scope
*
title.scrub {single|<h1 class="epgsubtitle">|<strong>|</strong>|</h1>}
titleoriginal.scrub {regex||<td class="eventinfolongdesc"(?:.*?)(?:</div>[^\(]*\(([^\)]*)\))<p/><p/>||}
subtitle.scrub {single(separator="<p/><p/>" exclude="Főszereplők:")|<td class="eventinfolongdesc" colspan="2">||</td>|</tr>}
description.scrub {single(separator="<p/><p/>" exclude="Főszereplők:")|<td class="eventinfolongdesc" colspan="2">||</td>|</tr>}
*
director.scrub {regex||<td class="eventinfolongdesc"(?:.*?)(?:Rendezte\|Rendező):(.+?)(?:<p/>\|<br/>\|</td>\|<div)||}
actor.scrub {regex||<td class="eventinfolongdesc"(?:.*?)Főszereplők:(.+?)(?:<p/>\|<br/>\|</td>\|<div)||}
category.scrub {single(separator="/"": ")|<div class="eventinfocontenttype">||</div>|</div>}
rating.scrub {single|<span class="nownextrating"><img src="/images/etc/||.svg|.svg}
ratingicon.scrub {single|<span class="nownextrating"><img src="||"|</span>}
starrating.scrub {single|<span class="rating_text_container">|<span>|</span>|</span>}
starrating.scrub {single|<span class="nownextrecommended" title="||">|">}
showicon.scrub {url|https://www.musor.tv|<td class="eventinfolongdesc"|src="|"|</div>}
*
scope.range {(showdetails)|end}
temp_1.modify {substring(type=regex)|'title' "\s((?:[CDLMXVI]+\.*\/)?\d+)\.$"}
title.modify {set|'index_title'}
*title.modify {remove(type=regex)|\s(?:[CDLMXVI]+\.*\/)?\d+\.$}
description.modify {remove(type=regex)|"<div.*$"}
description.modify {cleanup(tags="<"">")}
subtitle.modify {cleanup(tags="<"">")}
temp_5.modify {calculate(format=F0 type=element)|'subtitle' #}
subtitle.modify {substring('temp_5' "3" type=element)|1 1}
subtitle.modify {clear('temp_5' not "3")}
description.modify {remove|'subtitle'}
description.modify {remove(type=regex)|"\d+/\d+\.:?\s*"}
subtitle.modify {clear(~ "Episode")}
subtitle.modify {clear(~ ". rész")}
subtitle.modify {remove(type=regex)|"\d+/\d+\.:\s"}
description.modify {remove('titleoriginal' not "")|('titleoriginal')}
temp_4.modify {substring(type=regex)|'titleoriginal' "[^\d\s]+\s\d+\s-\s(.*)$"}
temp_4.modify {clear(~ "Episode")}
temp_3.modify {substring(type=regex)|'titleoriginal' "(.*?)\s\d+\s-\s.*$"}
titleoriginal.modify {set('temp_3' not "")|'temp_3'}
titleoriginal.modify {remove(type=regex)|"\s[CDLMXVI]+\.$"}
titleoriginal.modify {remove(type=regex)|"^[^Y\s]+(\sY\d+\s.*)$"}
titleoriginal.modify {clear('title' ~ 'titleoriginal')}
titleoriginal.modify {cleanup(style=name)}
titleoriginal.modify {addend(not "")|(lang=en)}
titleoriginal.modify {clear} *disable to keep original title
subtitle.modify {set('temp_4' not "")|'temp_4'}
subtitle.modify {cleanup(style=name)}
director.modify {replace|,|\|}
actor.modify {replace|,|\|}
category.modify {cleanup(style=name)}
*
temp_1.modify {replace(type=regex)|"\.*/"|/}
temp_2.modify {substring(type=regex)|'temp_1' "([CDLMXVI]+)/"}
temp_2.modify {cleanup(style=roman2arabicnumeral)}
temp_1.modify {replace('temp_2' not "" type=regex)|([CDLMXVI]+)/|'temp_2'}
episode.modify {addstart(pattern="'S1'/'E1'""'E1'" 'temp_1' not "")|'temp_1'}
*
rating.modify {remove|pg_}
rating.modify {addend(not "")|+}
ratingicon.modify {addstart(not "")|https://www.musor.tv}
starrating.modify {replace|Ajánlatunk!|1.0}
end_scope
**  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _
**      #####  CHANNEL FILE CREATION (only to create the xxx-channel.xml file)
**
** @auto_xml_channel_start
*url_index {url|https://musor.tv/}
*index_site_id.scrub {multi|<table class="channellisttable"|<a href="//musor.tv/mai/tvmusor/|" class|</table>}
*index_site_channel.scrub {multi|<table class="channellisttable"|class="channellistentry">|</a>|</table>}
*index_site_id.modify {cleanup(removeduplicates link="index_site_channel")}
** @auto_xml_channel_end
